// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package cms

import (
	"context"
	"database/sql"
	"time"
)

const createAbteilung = `-- name: CreateAbteilung :execresult
INSERT INTO Abteilung (id, name) VALUES (?, ?)
`

type CreateAbteilungParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateAbteilung(ctx context.Context, arg CreateAbteilungParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAbteilung, arg.ID, arg.Name)
}

const createAngebot = `-- name: CreateAngebot :execresult
INSERT INTO Angebot (id, title, subtitle, date_start, date_stop, link, image, anzeigen)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateAngebotParams struct {
	ID        string
	Title     string
	Subtitle  sql.NullString
	DateStart time.Time
	DateStop  time.Time
	Link      string
	Image     string
	Anzeigen  sql.NullBool
}

func (q *Queries) CreateAngebot(ctx context.Context, arg CreateAngebotParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAngebot,
		arg.ID,
		arg.Title,
		arg.Subtitle,
		arg.DateStart,
		arg.DateStop,
		arg.Link,
		arg.Image,
		arg.Anzeigen,
	)
}

const createJob = `-- name: CreateJob :execresult
INSERT INTO Jobs (id, name, online) VALUES (?, ?,?)
`

type CreateJobParams struct {
	ID     string
	Name   string
	Online bool
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createJob, arg.ID, arg.Name, arg.Online)
}

const createMitarbeiter = `-- name: CreateMitarbeiter :execresult
INSERT INTO Mitarbeiter (id, name, short, image, sex, tags, focus, abteilungId)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateMitarbeiterParams struct {
	ID          string
	Name        string
	Short       string
	Image       bool
	Sex         string
	Tags        string
	Focus       string
	Abteilungid string
}

func (q *Queries) CreateMitarbeiter(ctx context.Context, arg CreateMitarbeiterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMitarbeiter,
		arg.ID,
		arg.Name,
		arg.Short,
		arg.Image,
		arg.Sex,
		arg.Tags,
		arg.Focus,
		arg.Abteilungid,
	)
}

const createPartner = `-- name: CreatePartner :execresult
INSERT INTO Partner (id, name, link, image)
VALUES (?, ?, ?, ?)
`

type CreatePartnerParams struct {
	ID    string
	Name  string
	Link  string
	Image string
}

func (q *Queries) CreatePartner(ctx context.Context, arg CreatePartnerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPartner,
		arg.ID,
		arg.Name,
		arg.Link,
		arg.Image,
	)
}

const deleteAbteilung = `-- name: DeleteAbteilung :exec
DELETE FROM Abteilung WHERE id = ?
`

func (q *Queries) DeleteAbteilung(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAbteilung, id)
	return err
}

const deleteAngebot = `-- name: DeleteAngebot :exec
DELETE FROM Angebot WHERE id = ?
`

func (q *Queries) DeleteAngebot(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAngebot, id)
	return err
}

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM Jobs WHERE id = ?
`

func (q *Queries) DeleteJob(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteJob, id)
	return err
}

const deleteMitarbeiter = `-- name: DeleteMitarbeiter :exec
DELETE FROM Mitarbeiter WHERE id = ?
`

func (q *Queries) DeleteMitarbeiter(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMitarbeiter, id)
	return err
}

const deletePartner = `-- name: DeletePartner :exec
DELETE FROM Partner WHERE id = ?
`

func (q *Queries) DeletePartner(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePartner, id)
	return err
}

const getAbteilung = `-- name: GetAbteilung :one
SELECT id, name FROM Abteilung WHERE id = ? LIMIT 1
`

func (q *Queries) GetAbteilung(ctx context.Context, id string) (Abteilung, error) {
	row := q.db.QueryRowContext(ctx, getAbteilung, id)
	var i Abteilung
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAbteilungen = `-- name: GetAbteilungen :many
SELECT id, name FROM Abteilung ORDER BY name
`

func (q *Queries) GetAbteilungen(ctx context.Context) ([]Abteilung, error) {
	rows, err := q.db.QueryContext(ctx, getAbteilungen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Abteilung
	for rows.Next() {
		var i Abteilung
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllMitarbeiter = `-- name: GetAllMitarbeiter :many
SELECT id, name, short, image, sex, tags, focus, abteilungid FROM Mitarbeiter ORDER BY name
`

func (q *Queries) GetAllMitarbeiter(ctx context.Context) ([]Mitarbeiter, error) {
	rows, err := q.db.QueryContext(ctx, getAllMitarbeiter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mitarbeiter
	for rows.Next() {
		var i Mitarbeiter
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Short,
			&i.Image,
			&i.Sex,
			&i.Tags,
			&i.Focus,
			&i.Abteilungid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPartner = `-- name: GetAllPartner :many
SELECT id, name, link, image FROM Partner ORDER BY name
`

func (q *Queries) GetAllPartner(ctx context.Context) ([]Partner, error) {
	rows, err := q.db.QueryContext(ctx, getAllPartner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partner
	for rows.Next() {
		var i Partner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Link,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAngebot = `-- name: GetAngebot :one
SELECT id, title, subtitle, date_start, date_stop, link, image, anzeigen FROM Angebot WHERE id = ? LIMIT 1
`

func (q *Queries) GetAngebot(ctx context.Context, id string) (Angebot, error) {
	row := q.db.QueryRowContext(ctx, getAngebot, id)
	var i Angebot
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Subtitle,
		&i.DateStart,
		&i.DateStop,
		&i.Link,
		&i.Image,
		&i.Anzeigen,
	)
	return i, err
}

const getAngeboten = `-- name: GetAngeboten :many
SELECT id, title, subtitle, date_start, date_stop, link, image, anzeigen FROM Angebot ORDER BY title
`

func (q *Queries) GetAngeboten(ctx context.Context) ([]Angebot, error) {
	rows, err := q.db.QueryContext(ctx, getAngeboten)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Angebot
	for rows.Next() {
		var i Angebot
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Subtitle,
			&i.DateStart,
			&i.DateStop,
			&i.Link,
			&i.Image,
			&i.Anzeigen,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getJob = `-- name: GetJob :one
SELECT id, name, online FROM Jobs WHERE id = ? LIMIT 1
`

func (q *Queries) GetJob(ctx context.Context, id string) (Job, error) {
	row := q.db.QueryRowContext(ctx, getJob, id)
	var i Job
	err := row.Scan(&i.ID, &i.Name, &i.Online)
	return i, err
}

const getJos = `-- name: GetJos :many
SELECT id, name, online FROM Jobs ORDER BY name
`

func (q *Queries) GetJos(ctx context.Context) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, getJos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(&i.ID, &i.Name, &i.Online); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMitarbeiter = `-- name: GetMitarbeiter :one
SELECT id, name, short, image, sex, tags, focus, abteilungid FROM Mitarbeiter WHERE id = ? LIMIT 1
`

func (q *Queries) GetMitarbeiter(ctx context.Context, id string) (Mitarbeiter, error) {
	row := q.db.QueryRowContext(ctx, getMitarbeiter, id)
	var i Mitarbeiter
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Short,
		&i.Image,
		&i.Sex,
		&i.Tags,
		&i.Focus,
		&i.Abteilungid,
	)
	return i, err
}

const getPartner = `-- name: GetPartner :one
SELECT id, name, link, image FROM Partner WHERE id = ? LIMIT 1
`

func (q *Queries) GetPartner(ctx context.Context, id string) (Partner, error) {
	row := q.db.QueryRowContext(ctx, getPartner, id)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.Image,
	)
	return i, err
}

const updateAbteilung = `-- name: UpdateAbteilung :execresult
UPDATE Abteilung SET name = ? WHERE id = ?
`

type UpdateAbteilungParams struct {
	Name string
	ID   string
}

func (q *Queries) UpdateAbteilung(ctx context.Context, arg UpdateAbteilungParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAbteilung, arg.Name, arg.ID)
}

const updateAngebot = `-- name: UpdateAngebot :execresult
UPDATE Angebot SET title = ?, subtitle = ?, date_start = ?, date_stop = ?, link = ?, image = ?, anzeigen = ? WHERE id = ?
`

type UpdateAngebotParams struct {
	Title     string
	Subtitle  sql.NullString
	DateStart time.Time
	DateStop  time.Time
	Link      string
	Image     string
	Anzeigen  sql.NullBool
	ID        string
}

func (q *Queries) UpdateAngebot(ctx context.Context, arg UpdateAngebotParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAngebot,
		arg.Title,
		arg.Subtitle,
		arg.DateStart,
		arg.DateStop,
		arg.Link,
		arg.Image,
		arg.Anzeigen,
		arg.ID,
	)
}

const updateJob = `-- name: UpdateJob :execresult
UPDATE Jobs SET name = ?, online = ? WHERE id = ?
`

type UpdateJobParams struct {
	Name   string
	Online bool
	ID     string
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateJob, arg.Name, arg.Online, arg.ID)
}

const updateMitarbeiter = `-- name: UpdateMitarbeiter :execresult
UPDATE Mitarbeiter SET name = ?, short = ?, image = ?, sex = ?, tags = ?, focus = ?, abteilungId = ? WHERE id = ?
`

type UpdateMitarbeiterParams struct {
	Name        string
	Short       string
	Image       bool
	Sex         string
	Tags        string
	Focus       string
	Abteilungid string
	ID          string
}

func (q *Queries) UpdateMitarbeiter(ctx context.Context, arg UpdateMitarbeiterParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateMitarbeiter,
		arg.Name,
		arg.Short,
		arg.Image,
		arg.Sex,
		arg.Tags,
		arg.Focus,
		arg.Abteilungid,
		arg.ID,
	)
}

const updatePartner = `-- name: UpdatePartner :execresult
UPDATE Partner set name = ?, link = ?, image = ? WHERE id = ?
`

type UpdatePartnerParams struct {
	Name  string
	Link  string
	Image string
	ID    string
}

func (q *Queries) UpdatePartner(ctx context.Context, arg UpdatePartnerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePartner,
		arg.Name,
		arg.Link,
		arg.Image,
		arg.ID,
	)
}
